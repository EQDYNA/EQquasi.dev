#! /usr/bin/env python3
"""
Script to setup the case via user_defined_params.py.
"""
from user_defined_params import *

def create_model_input_file():
    # Function to create model.txt used by EQquasi.
    with open('model.txt', 'w') as f:
        f.write(str(xmin) + "  " + str(xmax) + "\n")
        f.write(str(ymin) + "  " + str(ymax) + "\n")
        f.write(str(zmin) + "  " + str(zmax) + "\n")
        f.write(str(xminc) + "  " + str(xmaxc) + "  " + str(zminc) + "\n")
        f.write(str(nuni_y_plus) + "  " + str(nuni_y_minus) + "\n")
        f.write(str(enlarging_ratio) + "\n")
        f.write(str(dx) + "\n")
        f.write(str(vp) + "  " + str(vs) + "  " + str(rou) + "\n")
        f.write(str(rough_fault) + "\n")
        f.write(str(rheology) + "\n")
        f.write(str(friclaw) + "\n")
        f.write(str(ntotft) + "\n")
        f.write(str(bp) + "\n")
        f.write(str(xi) + "  " + str(minDc) + "\n")
        f.write(str(exit_slip_rate) + "\n")
        f.write(str(far_vel_load) + "\n")
        f.write(str(creep_slip_rate) + "\n")
        f.write(str(init_norm) + "\n")
        f.write(str(solver) + "\n")
        f.write(str(az_op) + "\n")
        f.write(str(az_maxiter) + "\n")
        f.write(str(az_tol) + "\n")
        f.write(str(nt_out) + "\n")
        f.write(str(mode) + "\n")

def create_station_input_file():
    # Function to create model.txt used by EQquasi.
    with open('station.txt', 'w') as f:
        f.write(str(n_off_fault) + "\n")
        f.write(str(n_on_fault) + "\n")
        f.write(str(" ") + "\n")
        for i in range(len(st_coor_on_fault)):
            f.write(str(st_coor_on_fault[i][0]) + " " + str(st_coor_on_fault[i][1]) + "\n")
        f.write(str(" ") + "\n")
        for i in range(len(st_coor_on_fault)):
            f.write(str(st_coor_off_fault[i][0]) + " " + str(st_coor_off_fault[i][1]) + " " + str(st_coor_off_fault[i][2]) + "\n")

def create_batch_script():
    # Function to create batch script used by HPC system.
    with open("batch.hpc", "w") as f:
        f.write("#! /bin/bash" + "\n")
        f.write("#SBATCH -J " + str(casename) + "\n")
        f.write("#SBATCH -o a.eqquasi.log%j" + "\n")
        f.write("#SBATCH -N " + str(HPC_nnode) + "\n")
        f.write("#SBATCH -n " + str(HPC_ncpu) + "\n")
        f.write("#SBATCH -p " + str(HPC_queue) + "\n")
        f.write("#SBATCH -t " + str(HPC_time) + "\n")
        f.write("#SBATCH -A " + str(HPC_account) + "\n")
        f.write("#SBATCH --mail-user=" + str(HPC_email) + "\n")
        f.write("#SBATCH --mail-type=begin" + "\n")
        f.write("#SBATCH --mail-type=end" + "\n")
        # Executable part.
        f.write("for i in $(seq " + str(istart) + " " + str(iend) + ");" + "\n")
        f.write("do" + "\n")
        f.write("  echo $i >> currentcycle.txt" + "\n")
        f.write("  ibrun eqquasi" + "\n")
        f.write("  mkdir \"./Q$((i-1))\"" + "\n")
        f.write("  mv fltst* srfst* tdyna* global* p1* p2* disp.* fault.* \"./Q$((i-1))\"" + "\n")
        f.write("  cp cplot* \"./Q$((i-1))\"" + "\n")
        f.write("done" + "\n")
        # End excutable part.
def estimate_HPC_resource():
    nx = int((xmax-xmin)/dx)
    nz = int((zmax-zmin)/dx)
    ncell = nx*nz*(nuni_y_plus + nuni_y_minus)*2
    estimate_ncpu = int(ncell/10000)
    estimate_nnode = int(estimate_ncpu/128) + 1
    print("Estimated total cells in the model is " + str(ncell))
    print("Estimated number of computing nodes to be requested is " + str(estimate_nnode))
    print("Estimated number of CPUs to be requested is " + str(estimate_ncpu))

def _main_func(description):
    create_model_input_file()
    create_batch_script()
    create_station_input_file()
    estimate_HPC_resource()

if __name__ == "__main__":
    _main_func(__doc__)
