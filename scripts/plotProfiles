#! /usr/bin/env python3
"""
Script to plot temporal evolutions of on-fault variables
    on a vertical and a horizontal profiles.
"""

import xarray as xr
import matplotlib.pyplot as plt
import numpy as np
import os, glob, re, imageio
from pdf2image import convert_from_path
from user_defined_params import *

#
SMALL_SIZE = 10
r = 10e6 # half range to show stresses in Pa.
mn = init_norm # initial normal stress
ms = -mn*fric_rsf_r0 # initial mean shear stress for plotting.
md = 0 # initial mean shear dip stress
# Read in file name from terminal.
# fname = input("Enter the file name : ")

def generate_timeseries_profile(mode, var):
    filenames = glob.glob('./fault.*.nc')
    filenames = sort_nicely(filenames)
    num_files = len(filenames)

    # fault.r.nc must exist
    a =xr.open_dataset('fault.r.nc')
    shear_strike = a.shear_strike
    num_rows = shear_strike.shape[0]
    num_cols = shear_strike.shape[1]
    middle_row_index = num_rows // 4
    middle_col_index = num_cols // 2
    middle_row_index = middle_row_index*3

    print(num_files, num_rows, num_cols, middle_row_index, middle_col_index)

    if mode==1:
        # plot vertical profile, count rows
        data = np.zeros((num_rows, num_files))
        out_file = 'cVerticalProfile.'+var+'.png'
        xlabel = 'Depth to surface on-fault nodes'
        title = 'Vertical profile for '+var
    elif mode ==2:
        # plot horizontal profile, count columns
        data = np.zeros((num_cols, num_files))
        out_file = 'cHorizontalProfile.'+var+'.png'
        xlabel = 'Along strike on-fault nodes'
        title = 'Horizontal profile for ' + var
    
    itag = 0
    for file1 in filenames:
        b = xr.open_dataset(file1)
        if var=='effective_normal':
            res = b.effective_normal
            res = res/1.e6
            ylabel='Stress MPa'
        elif var=='slip_rate':
            res = b.slip_rate
            ylabel='Slip rate m/s'
        elif var=='shear_strike':
            res = b.shear_strike
            res = res/1.e6
            ylabel='Stress MPa'

        itag = itag + 1
        if mode == 1:
            data[:,itag-1] = res[:, middle_col_index]
        elif mode == 2:
            for i in range(num_cols):
                data[i,itag-1] = res[middle_row_index,i]

    plt.figure()
    for i in range(num_files):
        plt.plot(data[:,i])
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.title(title)
    plt.savefig(out_file, dpi=300)

def tryint(s):
    try:
        return int(s)
    except:
        return s

def alphanum_key(s):
    return [tryint(c) for c in re.split('([0-9]+)', s)]

def sort_nicely(l):
    l.sort(key=alphanum_key, reverse=False)
    return l

def generate_gif():
  #images = []
  #dirFiles = []
  #for fname in os.listdir(os.getcwd()):
  #  name, file_extension = os.path.splitext(fname)
  #  if '.png' in file_extension:
  #    dirFiles += fname
  #print(dirFiles)
  #for fname in sorted(dirFiles):
  #  print(fname)
  #  images.append(imageio.imread(fname))
  #imageio.mimsave('on_fault_vars.gif',images)
  filenames = glob.glob('.//*.png')
  filenames = sort_nicely(filenames)
  with imageio.get_writer('./on_fault_vars.gif', mode='I') as writer:
      for filename in filenames:
          image = imageio.v2.imread(filename)
          #img = convert_from_path(filename)[0]
          #image = np.array(img.getdata(), np.uint8).reshape(img.size[1], img.size[0], 3)
          writer.append_data(image)

def seek_numbers_filename(x):
    return (x[6:10])

#dirFiles = os.listdir(os.getcwd())
def _main_func(description):
    #dirFiles = list()
    #for fname in os.listdir(os.getcwd()):
    #    name, file_extension = os.path.splitext(fname)
    #    if 'fault.' in name and '.nc' in file_extension:
    #        dirFiles += fname
    #        if os.path.exists(fname + '.png') == False: plot_fault(str(fname))
    #    if 'roughness' in name and '.nc' in file_extension:
    #        dirFiles += fname
    #        plot_roughness(str(fname))
    #generate_gif()
    generate_timeseries_profile(1, 'effective_normal')
    generate_timeseries_profile(1, 'slip_rate')
    generate_timeseries_profile(1, 'shear_strike')

    generate_timeseries_profile(2, 'effective_normal')
    generate_timeseries_profile(2, 'slip_rate')
    generate_timeseries_profile(2, 'shear_strike')

if __name__ == "__main__":
    _main_func(__doc__)

#print(*dirFiles)
#sorted_file_list = sorted(dirFiles, key=seek_numbers_filename)
#print(sorted_file_list)

#fig = plt.figure()
#anim = animation.FuncAnimation(fig, plot_fault, frames = 1, interval = 1, blit=False)


