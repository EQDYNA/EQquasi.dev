#! /usr/bin/env python3
"""
Script to plot temporal evolutions of on-fault variables
    on a vertical and a horizontal profiles.
"""

import xarray as xr
import matplotlib.pyplot as plt
import numpy as np
import os, glob, re, imageio
from pdf2image import convert_from_path
from user_defined_params import par
from lib import *

ninterval = 20 # plot results in every 20 steps.
# Read in file name from terminal.
# fname = input("Enter the file name : ")
    
def generate_timeseries_profile(mode, var, ninterval,nwindow):
    filenames = glob.glob('./fault.?????.nc')
    filenames = sort_nicely(filenames)
    num_files = len(filenames)

    # fault.r.nc must exist
    a =xr.open_dataset('fault.r.nc')
    shear_strike = a.shear_strike
    num_rows = shear_strike.shape[0]
    num_cols = shear_strike.shape[1]
    middle_row_index = num_rows // 4 # 1/4th quartile depth of the whole model depth
    middle_col_index = num_cols // 2
    middle_row_index = middle_row_index*3

    print(num_files, num_rows, num_cols, middle_row_index, middle_col_index)

    if mode==1:
        # plot vertical profile, count rows
        data = np.zeros((num_rows, num_files))
        data_ave = np.zeros((num_rows-nwindow+1, num_files))
        out_file = 'cVerticalProfile.'+var+'.png'
        xlabel = 'Depth to surface on-fault nodes'
        title = 'Vertical profile for '+var
    elif mode ==2:
        # plot horizontal profile, count columns
        data = np.zeros((num_cols, num_files))
        data_ave = np.zeros((num_cols-nwindow+1, num_files))
        out_file = 'cHorizontalProfile.'+var+'.png'
        xlabel = 'Along strike on-fault nodes'
        title = 'Horizontal profile for ' + var
    
    itag = 0
    for file1 in filenames:
        b = xr.open_dataset(file1)
        if var    =='effective_normal':
            res   = b.effective_normal
            res   = res/1.e6
            ylabel='Stress MPa'
            
        elif var  =='slip_rate':
            res   = b.slip_rate
            ylabel='Slip rate m/s'
            
        elif var  =='shear_strike':
            res   = b.shear_strike
            res   = res/1.e6
            ylabel='Stress MPa'
            
        elif var  =='slips':
            res   = b.slips
            ylabel='Slip along strike m'
            
        itag = itag + 1
        if mode == 1:
            data[:,itag-1] = res[:, middle_col_index]
        elif mode == 2:
            for i in range(num_cols):
                data[i,itag-1] = res[middle_row_index,i]

        data_ave[:,itag-1] = boxcar_average(data[:,itag-1],nwindow)
    
    data0 = data_ave[:,::ninterval]
    
    plt.figure()
    for i in range(data0.shape[1]):
        plt.plot(data0[:,i])
        
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.title(title)
    plt.savefig(out_file, dpi=300)

    return data0
    
def _main_func(description):

    generate_timeseries_profile(1, 'effective_normal', ninterval,10)
    generate_timeseries_profile(1, 'slip_rate', ninterval,10)
    generate_timeseries_profile(1, 'shear_strike', ninterval,10)
    generate_timeseries_profile(1, 'slips', ninterval,10)

    generate_timeseries_profile(2, 'effective_normal', ninterval,10)
    generate_timeseries_profile(2, 'slip_rate', ninterval,10)
    generate_timeseries_profile(2, 'shear_strike', ninterval,10)
    generate_timeseries_profile(2, 'slips', ninterval,10)

if __name__ == "__main__":
    _main_func(__doc__)


